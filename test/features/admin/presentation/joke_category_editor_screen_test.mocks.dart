// Mocks generated by Mockito 5.4.6 from annotations
// in snickerdoodle/test/features/admin/presentation/joke_category_editor_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:snickerdoodle/src/features/jokes/data/models/joke_category.dart'
    as _i4;
import 'package:snickerdoodle/src/features/jokes/data/repositories/joke_category_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [JokeCategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJokeCategoryRepository extends _i1.Mock
    implements _i2.JokeCategoryRepository {
  @override
  _i3.Stream<List<_i4.JokeCategory>> watchCategories() =>
      (super.noSuchMethod(
            Invocation.method(#watchCategories, []),
            returnValue: _i3.Stream<List<_i4.JokeCategory>>.empty(),
            returnValueForMissingStub:
                _i3.Stream<List<_i4.JokeCategory>>.empty(),
          )
          as _i3.Stream<List<_i4.JokeCategory>>);

  @override
  _i3.Future<void> upsertCategory(_i4.JokeCategory? category) =>
      (super.noSuchMethod(
            Invocation.method(#upsertCategory, [category]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCategory(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<String>> watchCategoryImages(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#watchCategoryImages, [categoryId]),
            returnValue: _i3.Stream<List<String>>.empty(),
            returnValueForMissingStub: _i3.Stream<List<String>>.empty(),
          )
          as _i3.Stream<List<String>>);

  @override
  _i3.Future<void> addImageToCategory(String? categoryId, String? imageUrl) =>
      (super.noSuchMethod(
            Invocation.method(#addImageToCategory, [categoryId, imageUrl]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteImageFromCategory(
    String? categoryId,
    String? imageUrl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteImageFromCategory, [categoryId, imageUrl]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
