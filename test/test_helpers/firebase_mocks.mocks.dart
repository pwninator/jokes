// Mocks generated by Mockito 5.4.6 from annotations
// in snickerdoodle/test/test_helpers/firebase_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:snickerdoodle/src/core/services/image_service.dart' as _i4;
import 'package:snickerdoodle/src/features/jokes/data/services/joke_cloud_function_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [JokeCloudFunctionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJokeCloudFunctionService extends _i1.Mock
    implements _i2.JokeCloudFunctionService {
  MockJokeCloudFunctionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> createJoke({
    required String? setupText,
    required String? punchlineText,
    String? setupImageUrl,
    String? punchlineImageUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createJoke, [], {
              #setupText: setupText,
              #punchlineText: punchlineText,
              #setupImageUrl: setupImageUrl,
              #punchlineImageUrl: punchlineImageUrl,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>?> createJokeWithResponse({
    required String? setupText,
    required String? punchlineText,
    String? setupImageUrl,
    String? punchlineImageUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createJokeWithResponse, [], {
              #setupText: setupText,
              #punchlineText: punchlineText,
              #setupImageUrl: setupImageUrl,
              #punchlineImageUrl: punchlineImageUrl,
            }),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<Map<String, dynamic>?> populateJoke(String? jokeId) =>
      (super.noSuchMethod(
            Invocation.method(#populateJoke, [jokeId]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<Map<String, dynamic>?> updateJoke({
    required String? jokeId,
    required String? setupText,
    required String? punchlineText,
    String? setupImageUrl,
    String? punchlineImageUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateJoke, [], {
              #jokeId: jokeId,
              #setupText: setupText,
              #punchlineText: punchlineText,
              #setupImageUrl: setupImageUrl,
              #punchlineImageUrl: punchlineImageUrl,
            }),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);
}

/// A class which mocks [ImageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageService extends _i1.Mock implements _i4.ImageService {
  MockImageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isValidImageUrl(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#isValidImageUrl, [url]),
            returnValue: false,
          )
          as bool);

  @override
  String processImageUrl(
    String? url, {
    int? width,
    int? height,
    String? quality,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #processImageUrl,
              [url],
              {#width: width, #height: height, #quality: quality},
            ),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(
                #processImageUrl,
                [url],
                {#width: width, #height: height, #quality: quality},
              ),
            ),
          )
          as String);

  @override
  String getThumbnailUrl(String? url, {int? size = 150}) =>
      (super.noSuchMethod(
            Invocation.method(#getThumbnailUrl, [url], {#size: size}),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getThumbnailUrl, [url], {#size: size}),
            ),
          )
          as String);

  @override
  String getFullSizeUrl(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#getFullSizeUrl, [url]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getFullSizeUrl, [url]),
            ),
          )
          as String);

  @override
  _i3.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getCacheInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheInfo, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);
}
